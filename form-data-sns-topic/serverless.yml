org: warloc69
app: sms-sender
service: form-data-sns-topic

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs12.x
  lambdaHashingVersion: '20201221'
  stage: dev

functions:
  hello:
    handler: handler.consumer
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - SmsQueue
              - Arn
    environment:
      REGION: "us-east-1"
#    role: SmsSenderRole


resources:
  Resources:
    SmsQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: "SmsQueue"
    TopicWithQueue:
      Type: AWS::SNS::Topic
      Properties:
        Subscription:
          - Endpoint:
              Fn::GetAtt:
                - "SmsQueue"
                - "Arn"
            Protocol: "sqs"
        TopicName: "SmsTopic"
    FormDataProxyAPI:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: FormDataProxyAPI
    SmsSenderRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - lambda.amazonaws.com
              Action: sts:AssumeRole
        Policies:
          - PolicyName: SmsSenderRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource: "*"
    GatewayRole:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Principal:
                Service:
                  - apigateway.amazonaws.com
              Action:
                - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: GatewayRolePolicy
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: Allow
                  Action:
                    - sns:Publish
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - logs:PutLogEvents
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                  Resource: "*"
    ApiGatewayGETMethod:
      Type: AWS::ApiGateway::Method
      Properties:
        AuthorizationType: NONE
        HttpMethod: POST
        RequestParameters:
          method.request.querystring.body: false
        Integration:
          Type: AWS
          Credentials:
            Fn::GetAtt: [ GatewayRole, Arn ]
          Uri:
            Fn::Join:
              - ""
              - - "arn:aws:apigateway:"
                - Ref: AWS::Region
                - ":sns:action/Publish"
          IntegrationHttpMethod: GET
          RequestParameters:
            integration.request.querystring.TopicArn: !Sub "'${TopicWithQueue}'"
            integration.request.querystring.Message: "method.request.querystring.body"
          IntegrationResponses:
            - StatusCode: 200
              ResponseTemplates:
                application/json: '{"status":"OK"}'
        MethodResponses:
          - StatusCode: 200
        ResourceId:
          Fn::GetAtt: [ FormDataProxyAPI , RootResourceId ]
        RestApiId: !Ref FormDataProxyAPI

plugins:
  - serverless-plugin-typescript
  - serverless-offline
  - serverless-lift

